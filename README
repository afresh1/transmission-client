NAME
    Transmission::Client - Interface to Transmission

VERSION
    0.01

SYNOPSIS
     use Transmission::Client;

     my $client = Transmission::Client->new;

DESCRIPTION
    The documentation is half copy/paste from the Transmission RPC spec:
    <http://trac.transmissionbt.com/browser/trunk/doc/rpc-spec.txt>

    This module differs from P2P::Transmission in (at least) two ways: This
    one use Moose and it won't die or confess, which is especially annoying
    in the constructor.

ATTRIBUTES
  url
     $str = $self->url;

    Returns an URL to where the transmission rpc api is.

  session_id
     $str = $self->session_id;

    Returns the session ID used in HTTP header, when comunicating with
    transmission.

  error
     $str = $self->error;

    Returns the last error known to the object. All methods can return empty
    list in addtion to what spesified. Check this attribute if so happens.

  username
     $str = $self->username;

    Used to authenticate against Transmission.

  password
     $str = $self->password;

    Used to authenticate against Transmission.

  timeout
     $int = $self->timeout;

    Number of seconds to wait for RPC response.

  version
     $str = $self->version;

    Get Transmission version.

METHODS
  add
     $bool = $self->add(%args);

     key              | value type & description
     -----------------+-------------------------------------------------
     download_dir     | string      path to download the torrent to
     filename         | string      filename or URL of the .torrent file
     metainfo         | string      .torrent content
     paused           | 'boolean'   if true, don't start the torrent
     peer_limit       | number      maximum number of peers

    Either "filename" or "metainfo" MUST be included. All other arguments
    are optional.

  remove
     $bool = $self->remove(%args);

     key                | value type & description
     -------------------+-------------------------------------------------
     ids                | array      torrent list, as described in 3.1
     delete_local_data  | 'boolean'  delete local data. (default: false)

    "ids" can also be the string "all". "ids" is required.

  start
     $bool = $self->start($ids);

    Will start one or more torrents. $ids can be a single int, an array of
    ints or the string "all".

  stop
     $bool = $self->stop($ids);

    Will stop one or more torrents. $ids can be a single int, an array of
    ints or the string "all".

  verify
     $bool = $self->stop($ids);

    Will verify one or more torrents. $ids can be a single int, an array of
    ints or the string "all".

  torrents
     $array_ref = $self->torrents(%args);

     key       | value type & description
     ----------+-------------------------------------------------
     ids       | array      torrent list, as described in 3.1
               |            this is optional
     fields    | array      described in 3.3 
               |            default field array is ["id"]
     template  | string     a template describing pre-defined fields

    Returns a list of torrent data or empty list on failure.

  encryption
     ?? = $self->encryption;

  download_dir
     $str = $self->download_dir;

    Returns the path to where transmission download files.

  peer_limit
     $int = $self->peer_limit;

  pex_allowed
     ?? = $self->pex_allowed;

  port
     $int = $self->port;

  port_forwarding_enabled
     $bool = $self->port_forwarding_enabled;

  speed_limit_down
     $int = $self->speed_limit_down;

  speed_limit_down_enabled
     $bool = $self->speed_limit_down_enabled;

  speed_limit_up
     $int = $self->speed_limit_up;

  speed_limit_up_enabled
     $bool = $self->speed_limit_up_enabled;

  stats
     $hash_ref = $self->stats;

    Returns data from 'session-stats' RPC call. See chapter 4.2 in RPC spec.
    Note: All keys are converted from "CamelCase" to "camel_case".

  rpc
     $any = $self->rpc($method, %args);

    Communicate with backend. This methods is meant for internal use.

LICENSE
    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

AUTHOR
    Jan Henning Thorsen

